chapter0 플라스크 개발 환경 구축하기

도서의 파이썬 버전 : python 3.10.7 버전

** 가상 환경 만들기... 
파이썬에서는 개발할 때에 개발 프로젝트 별로 전용 실행 환경 구성
이 실행 환경을 가상환경... 
파이썬 기본 가상 환경 모듈 : venv
	venv 의 특징은 프로젝트 별로 분리된 파이썬 실행 환경 구축

가상 환경 구성 명령어
python -m venv [가상환경구성 이름]
-> python -m venv venv
 실행 결과 : 명령어가 실행되 위치에 venv라는 가상환경 구성이름의 디렉터리가 생성됨.

1. 디렉터리 생성(프로젝트 디렉터리)
  D:\Flaskbook 생성
  D:\ 영역으로 이동 후 "mkdir Flaskbook" 
2. 디렉터리 영역으로 이동
  cd Flaskbook
3. 가상환경 구성 
  python -m venv venv
------------------------------------------------------------------------------

D:\Flaskbook>python -m venv venv

D:\Flaskbook>dir
 D 드라이브의 볼륨에는 이름이 없습니다.
 볼륨 일련 번호: FE13-6C4A

 D:\Flaskbook 디렉터리

2024-12-02  오전 10:14    <DIR>          .
2024-12-02  오전 10:14    <DIR>          ..
2024-12-02  오전 10:14    <DIR>          venv
               0개 파일                   0 바이트
               3개 디렉터리  207,605,387,264 바이트 남음

D:\Flaskbook>

------------------------------------------------------------------------------
가상환경 활성화
PS D:\Flaskbook> .\venv\Scripts\Activate.ps1

가상환경 비활성화
PS D:\Flaskbook> deactivate
------------------------------------------------------------------------------
플라스크 설치
(venv) PS D:\Flaskbook> pip install flask

 flask와 같이 설치된 모듈
 click  : 명령러 라인용 프레임워크. 플라스크 커스텀 명령어 사용
 itsdangerous : 안전하게 데이터를 서명해 데이터의 정합성을 확보한다. 플라스크의 세션이나 쿠키를 보호
 Jinja2 : 디폴트 HTML 템플릿 엔진. 다른 템플릿 엔진 사용 가능함. 
 MarkupSafe : 인젝션 공격을 회피하기 위해 템플릿을 렌더링할 때에 신뢰할 수 없는 입력을 취소하는 기능
 Werkzeug : WSGI 툴킷으로 플라스크의 코어 구현은 Werkzeug를 바탕으로 만들어져 있음. 
-------------------------------------------------------------------------------
플라스크 명령어(flask --help)
- flask run : 플라스크의 내장 서버를 실행하는 명령어
  옵션은 flask run --help
   -h, --host : 웹 서버에 연결할 주소 지정하는 옵션
   -p, --port : 포트 주소 설정하는 옵션(기본은 5000번)
   --reload, --no-reload : auto reload 기능 on/off. 코드 편집시 자동 반영여부를 결정. 
   --debugger, --no-debugger : 디버거 모드를 on/off. 디버거 모드는 개발시 정보를 상세히 출력. 
   

- flask routes : 플라스크의 앱의 라우팅 정보를 출력. 실제 URL과 처리하는 함수를 연결하는 작업을 라우팅이라고 합니다.  url과 함수의 맵핑 정보를 출력.

(venv) PS D:\Flaskbook> flask routes
Endpoint   Methods  Rule
-----------  -------     -----------------------
hello_world  GET      /
static          GET      /static/<path:filename>

  - Endpoint : URL에 접근할 때 함수 또는 지정한 이름을 의미함. 
                static엔드포인트는 정적 파일용으로 사용되어지는 것으로 항상 고정 사용됨.
  - Methods : HTTP 메서드를 지정함. 메서드에 대한 지정이 없는 경우에는 GET이 기본.
  - Rule       : 접근시 사용하는 URL규칙을 의미함.  

(URL, URI, URN 검색해 조사하세요)

flask shell 명령어
flask shell은 플라스크 앱의 컨텍스트(실행 환경)에서 파이썬 인터렉티브 쉘을 사용하고 싶은 경우에
이용하는 것. 디버깅 또는 테스트 할 경우에 많이 사용함. (주의 플라스크가 없는 상태에서는 실행X)
------------------------------------------------------------------------------
VSCODE 설정하기... 

확장 기능... 파이썬 라이브러리
파이썬의 코드 스타일 가이드라인 "PEP8" 에 따라서 작성합니다. 
자동으로 코드 형태를 맞춰주는 라이브러리입니다. 
- 코드의 통일성.
- 개발 및 소스 리뷰가 쉬워짐.

# 라이브러리 설치
(venv) PS D:\Flaskbook> pip install flake8 black isort mypy
 
  - flake8	: PEP8에 따른 작성법의 코드인지 여부를 체크 
  - black 	: PEP8에 따른 작성법에 코드를 자동으로 완성
  - isort	: import 문을 PEP8에 따른 작성법으로 자동으로 정렬
  - mypy	: 타입 힌트의 타입을 확인

VSCODE 확장팩 설치 : flake8, black formatter, isort, mypy type checker (MS에서 관리하는 확장 팩)

 VSCODE setting열기 단축키 (ctrl + , )
 
 1. setting  열기 (ctrl + ,)
 2. 설정 상단에 있는 users 탭에서 workspace 탭으로 변경
 3. 우측 상단 메뉴 아이콘에 Open settings(JSON) 클릭
 4. 다음의 json 코드를 추가
{
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter",
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.formatOnType": true,
    "editor.wordBasedSuggestions": "off",
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit"
    }
  }
}

## .gitignore -> git버전 관리 툴에서 gitinore에 설정되어 있는 대상은 컷밋에서 제외합니다. 

https://www.toptal.com/developers/gitignore


=======================================
Chapter 1. 
=======
1. MVT 모델(비슷한 모델이 MVC[Model(비지니스-DB), View(보여질 화면(HTML)), Controller(url을 통한 제어)])
  - Model : DB와 연동하는 로직 부분을 담당.(비즈니스 영역)
  - View : 입력받은 내용을 토대로 Model과 Template을 제어 (MVC의 controller)
  - Template : 입력출력 담당(HTML)(MVC모델에서는 View)

------------- 실제작업... 디렉터리 생성 (minimalapp)

D:\Flaskbook\apps\minimalapp  디렉터리 생성.
(-> mkdir -p apps/minimalapp )  * -p 옵션은 부모 디렉터리가 없는 경우 생성하면서 디렉터리 만들기 옵션

## flask의 애플리케이션 실행 순서
1. 파이썬 스크립트를 작성
--- apps/minimalapp/app.py 내용
# Flask 클래스를 import 
from flask import Flask

# Flask클래스를 인스턴스화 합니다.
app = Flask(__name__)
# __name__ 변수의 값 출력
print(__name__)

##맵핑... @app.route()
@app.route("/")
def hello_world():
    return "<h1>Hello, Flask!</h1>"
---
2. 환경 변수 설정하고, 
(venv) PS D:\Flaskbook\apps\minimalapp> $env:FLASK_APP="app.py"
(venv) PS D:\Flaskbook\apps\minimalapp> $env:FLASK_DEBUG="true"


3. flask run 명령어 실행. 
(venv) PS D:\Flaskbook\apps\minimalapp> flask run

# .env 파일을 이용한 환경 변수 설정하기
위의 환경 변수 설정은 영속적이지 못합니다. 터미널 창을 닫으면 해당 속성값이 사라지게 됩니다. 
따라서 영속적으로 속성값을 이용하기 위해서 .env 파일을 이용하여 속성값을 가지게 만들어 봅니다. 
영속적 속성을 사용하기 위해서 python-dotenv 패키지를 설치합니다. 
pip install python-dotenv

플라스크는 앱 실행시에 .env 혹은 .flaskenv 파일을 찾고 불러옵니다. 처음에는 위의 패키지가 설치되어 있지
않아서 환경변수 파일을 로드하지 못합니다. 하지만, 설치 후에는 가능합니다. 

따라서, 실행(flask run)하는 위치에 .env 파일이 있다면 해당 파일의 내용을 읽어서 flask를 동작시킵니다. 
위치를 D:\Flaskboot 디렉터리로 이동하고, 거기에 .env 파일을 생성합니다. 
그리고, 내용을 
--- .env 
FLASK_APP=apps.minimalapp.app
FLASK_DEBUG=true
---
로 저장한 후에 flask run을 구동하면 apps/minimalapp/app.py  모듈을 불러와서 플라스크를 구동 시킵니다. 
이후에는 환경 변수에 저장된 내용을 동작하기 시작합니다. 

# 애플리케이션 루트(***)
애플리케이션 루트는 웹앱인 플라스크가 동작했을 때에 기본 경로를 말합니다. 앱에서 자원에 접근시 기본이 되는 경로를 의미하고, 아무 설정이 없으면 FLASK_APP에서 지정된 모듈(app.py)가 있는 위치가 기본 경로가 됩니다.









