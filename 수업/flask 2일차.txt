# 라우팅 이용하기
: 플라스크에 맵핑(url정보 - 함수간의 연결) 정보

# Flask클래스를 인스턴스화 합니다.
app = Flask(__name__)

@app.route("/")     # app 은 Flask 객체

# apps/minimalapp/app.py 파일에 추가 경로 설정... 
---
# Flask 클래스를 import
from flask import Flask

# Flask클래스를 인스턴스화 합니다.
app = Flask(__name__)
# __name__ 변수의 값 출력
print(__name__)


# 맵핑... @app.route()
@app.route("/")
def hello_world():
    return "<h1>Hello, Flask!</h1>"

--------------------------------------------------
플라스크에 엔드포인트 이름 지정하기... 

--------------------------------------------------
@xxx.route() 데코레이터의 주요 옵션.
  rule(경로-url)  - 함수와 연결하고자 하는 주소를 작성. (기본, 필수)
  methods - 함수와 연결시 허용할 HTTP 메서드를 지정
  endpoint - 엔트포인트 이름을 지정
--------------------------------------------------

엔드포인트로 지정된 이름은 플라스크 내부 설정 값(**)으로 사용됨.

연습)  hello 엔드포인트를 hello-endpoint 변경해 보세요. 


=============================
허가할 HTTP 메서드 지정
( @app.route() 데코레이터의 methods 옵션)

@app.route("/hello", methods=["GET", "POST"], endpoint="hello-endpoint")

추가로 플라스크 2.0 이후에 @app.get(), @app.post(), @app.put() ...
각 HTTP method로 진입시 처리할 함수에 데코레이터가 됩니다.


=============================
Rule(url) 변수 지정하기... 
@app.route 데코레이터에 Rule에 변수 지정이 가능함. 
변수는 <변수> 형식으로 지정합니다. 
** url 경로에 값을 통해서 변수값을 얻어내는 방법

... 생략 ...
@app.route("/hello/<name>", methods=["GET", "POST", "PUT"], endpoint="hello")
def hello(name):
    return f"Hello, {name}!"
... 생략 ...

(연습) uri 주소가 /info 인 경로에 이름과 나이를 입력받아서 그결과를 출력하는 
 플라스크 맵핑 함수를 작성해 보세요. 메서드와 endpoint는 알아서 작성하세요. 

@app.get("/info/<name>/<age>", endpoint="testRule")
def testRule(name, age):
    result = f"""<div>
    <h3>info</h3>
    <table border="1">
      <tr><th style="width:100px">이름</th><th style="width:100px">나이</th></tr>
      <tr><td>{name}</td><td>{age}살</td></tr>
    </table>
    </div>"""
    return result

==============================
Rule에 경로를 변수 사용할 때, 컨버터 사용
컨버터는 타입을 정의를 통해서 변수의 데이터 타입을 지정하여 타입 체크을 동작 구현
타입 맞지 않는 경우에는 오류 발생(HTTP 오류-Not Found)
@app.get("/info/<string:name>/<int:age>", endpoint="testRule")

 타입을 지정하는 컨버터 종류
 - string	: 문자열
 - int 	: 정수
 - float	: 실수
 - path	: /가 포함된 문자열
 - UUID	: UUID 고유 값  ex) 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d


# 템플릿 엔진을 이용한 페이지 출력
 템플릿 엔진이란? 템플릿이라는 모형과 데이터를 합성하여 결과 문서를 출력해주는 프로그램
플라스크의 기본 템플릿은 Jinja2입니다. 따로 설치할 필요는 없고 flask 설치시 같이 설치 됨. 
** 템플릿을 불러 사용하는 함수 : render_template()

  1. 랜더링에 필요한 템플릿 작성. 
     랜더링을 위한 템플릿들이 들어갈 디렉터리 생성(apps/minimalapp/templates)
     그 안에 템플릿을 생성( index.html )
  2. 템플릿을 작성합니다. 템플릿에 연동해서 들어갈 변수 값(data)는 {{ 변수명 }} 과 같은 형식으로 지정
     템플릿 엔진이 해당 값을 적용해서 풀어낼 때에 변수의 값의 위치에 데이터를 대입해서 완성. 
  3. render_template() 함수를 이용하여 결과물을  반환. 

---apps/minimalapp/templates/index.html
<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8">
        <title>Name Template</title>
    </head>
    <body>
        <h1>Name: {{ name }}</h1>
    </body>
</html>
---

# Jinja2 사용법
: 플라스크에 의해서 구현된 내용을 적용해서 사용.

 1. 변수값 출력 
 {{ 변수명 }} 

  객체 타입의 값을 전달 받으면 {{ 객체.메서드 혹은 각 타입별로 값에 대한 접근방식으로 표현. }} 

--- apps/minimalapp/app.py
... 생략 ...
@app.route("/hello/<name>", methods=["GET", "POST", "PUT"], endpoint="hello")
def hello(name):
    # return f"Hello, {name}!"
    # 템플릿 엔진 적용!!!
    dic = {"name": name, "age": 20}
    return render_template("index.html", data=dic)
... 생략 ...
---
--- apps/minimalapp/templates/index.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>Name Template</title>
  </head>
  <body>
    <h1>Name: {{ data["name"] }}</h1>
    <h2>Age: {{ data["age"] }}</h2>
  </body>
</html>
---

# if 조건문 사용
{% if 조건 %}  
(조건이 참인 경우 실행할 내용)
{% endif %}  -> endif

---
{% if name %}
<h1>Name: {{ name }}</h1>
{% else %}
<h1>Name: </h1>
{% endif %}
---

# for문 사용
---
<ul>
	{% for user in users %}
	<li><a href="{{ user.url }}">{{ user.username }}</a></li>
	{% endfor %}
</ul>
---

테스트 코드
--- apps/minimalapp/app.py
... 생략 ...

@app.route("/hello/<name>/<int:out>", methods=["GET", "POST", "PUT"])
def hello(name, out):
    # return f"Hello, {name}!"
    # 템플릿 엔진 적용!!!
    dic = {"name": name, "age": 20, "out": bool(out)}
    # for문을 사용하기 위한 값 생성...
    dataList = []  # user.url, user.username
    user = {}
    for i in range(10):
        user["url"] = f"http://localhost{i}"
        user["username"] = f"testuser{i}"
        dataList.append(user)
        user = {}
    print(dataList)
    return render_template("index.html", data=dic, datas=dataList)

... 생략 ...
---
--- apps/minimalapp/templates/index.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <title>Name Template</title>
  </head>
  <body>
    {% if data["out"] %}
    <h1>Name: {{ data["name"] }}</h1>
    <h2>Age: {{ data["age"] }}</h2>
    {% else %}
    <h3>값을 출력하지 않아요</h3>
    {% endif %}

    <h2>for문 적용</h2>
    <ul>
      {% comment %} 템플릿에서 주석 처리 {% endcomment %}
      {% for user in datas %}
      <li><a href="{{ user['url'] }}">{{ user['username'] }}</a></li>
      {% endfor %}
    </ul>
  </body>
</html>
---


















