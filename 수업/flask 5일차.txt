# Blueprint 이용하기... 

 앱 실행을 위한 처리 작업
1. CRUD 앱의 모듈을 작성(디렉터리)
2. 환경변수 FLASK_APP의 경로 변경(apps/app.py)
3. 엔트포인트를 만듭니다. (apps/views.py)
4. 템플릿 만들기
5. 정적 파일을 만들기
6. 템플릿에 CSS(정적파일에 있는) 읽어들이기
7. 동작 확인... 

# 1. CRUD 앱의 모듈 작성
 이전(app.py에서 바로 모듈을 등록)과 차이점은 app.py를 create_app()함수를 사용하여 플라스크리를 구동한다.
create_app()로 구현하면 간단한 개발환경과 스테이징 환경(테스트 환경), 라이브 환경 등의 환경 전환이 가능하다.
유닛 테스트(단위 테스트)가 쉬워진다는 장점.

 > 1. apps/crud 디렉터리 생성
 > 2. apps/app.py 파일을 생성
---
from flask import Flask


# create_app 함수 작성
def create_app():
    # 플라스크 인스턴스 생성
    app = Flask(__name__)

    # CRUD패키지로 부터 views 모듈을 import 한다.
    # views.py 모듈은 @app.route()와 같은 맵핑 기능을 가진 모듈
    from apps.crud import views as crud_views  # as 이후 별칭 선언

    # register_blueprint() 사용해 views(crud_views) blueprint에 등록
    # 엔드포인트 앞에 crud가 붙게 됨.
    app.register_blueprint(crud_views.crud, url_prefix="/crud")

    return app
---
 blueprint 기능
  앱을 분할하기 위한 플라스크 기능. 

 blueprint 특징과 이용법
 특징은 
  - 앱을 분할
  - URL 프리픽스 및 서브 도메인을 지정하여 다른 애플리케이션 루트를 구별할 수 있음. 
  - blueprint 단위로 템플릿을 나눌 수 있다.
  - blueprint 단위로 정적 파일을 나눌 수 있다. 
 이용은
 blueprint객체를 생성, 플라스크 앱인 app 인스턴스를 register_blueprint() 메서드를 통해 전달.
  
 blueprint 클래스의 주요 생성자... 
  - name  : Blueprint 앱의 이름. 각 엔드포인트 앞에 추가
  - import_name : Blueprint 앱의 패키지( app.crud.views)의 이름. 보통은 __name__ 을 지정
  - static_folder : Blueprint 앱의 정적 폴더
  - template_folder : Blueprint 앱의 템플릿 폴더
  - url_prefix : Blueprint 앱의 맨 앞에 추가하여 앱의 경로를 구별
  - subdomain : Blueprint 앱에 서브 도메인을 이용하는 경우

Blueprint 객체 생성 예
---
from flask import Blueprint

sample = Blueprint(
   __name__,
   "sample",
   static_folder="static",
   template_folder="templates",
   url_prefix = "/sample",
   subdomain = "example"
)
---
Blueprint는 위에 생성시 static_folder와 template 폴더를 지정하지 않으면 사용할 수 없어요. 

Blueprint를 app(flask app모듈) 모듈에 등록
app.register_blueprint(sample, url_prefix="/sample", subdomain="example")

주의) app.register_blueprint()를 사용해서 등록하는 경우... 
blueprint 객체 생성시 정보와 등록 정보가 중복되는 경우(동일한 값에 선언한 경우(다르면))... 
우선시하는 것은 app.register_blueprint()에서 사용한 값을 우선함(**)
 
Blueprint로 앱을 분할하는 모듈화
 앱을 나누는 규정은 없음. 다만, 1개의 기준으로 기능을 다음과 같이 나눈다고 생각하면 좋다. 
  - url 프리픽스 및 서브 도메인으로 나누고 싶은지
  - 화면에 레이아웃으로 나눌 것인지 

Blueprint 사용시 주의사항(템플릿 사용시 주의 사항)
 Blueprint는 템플릿 이용시에 template_folder를 지정하는데, 똑같은 경로로 템플릿이 지정되는 경우, 
첫번째 템플릿은 정상적으로 지정되지만, 2번째 부터는 표시할 수 없게 됩니다. 이 문제를 방지하기 위해서
templates 디렉터리에 앱명이나 구분값을 집어 넣어서 표현하는 것을 권장합니다. 


# 2. 환경변수 FLASK_APP의 경로 변경(apps/app.py)
--- .env 파일에 내용을 
# apps/app:create_app 을 지정
# 디렉터리 . , 모듈안에 함수 : 
FLASK_APP=apps.app:create_app
FLASK_DEBUG=true
... 생략 ...
---

# 3. 엔트포인트를 만듭니다. (apps/views.py)
---
from flask import Blueprint, render_template

# Blueprint 객체 생성
crud = Blueprint(
    "crud",
    __name__,
    static_folder="static",
    template_folder="templates",
)


# 맵핑 정보 생성
@crud.route("/")
def index():
    return render_template("crud/index.html")
---

#4. 템플릿 만들기
---apps/crud/templates/crud
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>CRUD</title>
  </head>
  <body>
    <p class="crud">crud 애플리케이션</p>
  </body>
</html>
---


#5. 정적 파일을 만들기
--- apps/crud/static/style.css
.crud {
  font-style: italic;
  color: brown;
}
---

#6. 템플릿에 CSS(정적파일에 있는) 읽어들이기
---apps/crud/templates/crud
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>CRUD</title>
    <link
      rel="stylesheet"
      href="{{ url_for('crud.static', filename='style.css') }}"
    />
  </head>
  <body>
    <p class="crud">crud 애플리케이션</p>
  </body>
</html>
---

# 7. 동작 확인... 
 PS D:\Flaskbook> .\venv\Scripts\Activate.ps1
(venv) PS D:\Flaskbook> flask run

서버 구동 중에 

http://127.0.0.1:5000 연결
(오류 발생)
http://127.0.0.1:5000/crud 연결
내용 출력
---------------------------------------------------------
(venv) PS D:\Flaskbook> flask routes
Endpoint     Methods  Rule
-----------  -------       ----------------------------
crud.index   GET         /crud/
crud.static   GET         /crud/static/<path:filename>
static         GET         /static/<path:filename>
=================================

## SQLAlchemy 설정!
 파이썬에서 제공하는 O/R 매퍼 또는 ORM(Object-Relation Mapping)이다. 
 O/R 매퍼는 데이터베이스와 프로그래밍 언어간 호환되지 않는 데이터를 변환할 수 있음. 
때문에 SQLAlchemy를 이용하면 SQL 코드를 쓰지 않고, 파이썬 코드를 이용하여 데이터베이스 접근이 가능함.

# 설치
-플라스크에서는 SQLAlchemy를 사용하기 위해서 flask-sqlalchemy 패키지를 설치하여 사용합니다. 
-데이터베이스를 마이그레이션하는 확장 기능 flask-migrate 도 같이 설치합니다. 
마이그레이션은 코드 정보를 바탕으로 데이터베이스의 테이블 작성이나 컬럼 변경 등을 실시하기 위한 기능.
코드 정보를 바탕으로 SQL이 발생하며, SQL 정보를 파일로 유지하기 위해서 지속적으로 계속 데이터베이스의 
갱신이나 또는 갱신 이전 상태로 되돌리는 롤백 기능을 사용할 수 있게 됩니다. 

(venv) PS D:\Flaskbook> pip install flask-sqlalchemy 
(venv) PS D:\Flaskbook> pip install flask-migrate

 설치 확인 : (venv) PS D:\Flaskbook> pip list

# 사용하기 
 flask-sqlalchemy와 flask-migrate 이용 준비... 
--- apps/app.py  수정 작업
# 경로 작업
from pathlib import Path

from flask import Flask

# 마이그레이션 작업을 위해
from flask_migrate import Migrate

# SQL작업을 위해
from flask_sqlalchemy import SQLAlchemy

# SQLAlchemy 객체 생성
db = SQLAlchemy()


# create_app 함수 작성
def create_app():
    # 플라스크 인스턴스 생성
    app = Flask(__name__)

    # app에 config 설정
    app.config.from_mapping(
        SECRET_KEY="VXNA6hHwn5sIuPQpZLxK",
        SQLALCHEMY_DATABASE_URI=f"sqlite:///{Path(__file__).parent / 'local.sqlite'}",
        SQLALCHEMY_TRACK_MODIFICATIONS=False,
    )

    # SQLAlchemy와 앱 연계
    db.init_app(app)
    # Migrate와 앱 연계
    Migrate(app, db)

    # CRUD패키지로 부터 views 모듈을 import 한다.
    # views.py 모듈은 @app.route()와 같은 맵핑 기능을 가진 모듈
    from apps.crud import views as crud_views  # as 이후 별칭 선언

    # register_blueprint() 사용해 views(crud_views) blueprint에 등록
    # 엔드포인트 앞에 crud가 붙게 됨.
    app.register_blueprint(crud_views.crud, url_prefix="/crud")

    return app
---

** SQLALCHEMY_DATABASE_URI로 사용되는 대표적인 데이터 소스
 MySQL   	=>  mysql://username:password@hostname/database
      - username : DB 사용자
      - password : DB 사용자 패스워드
      - hostname : DB 주소
      - database : DB내에 있는 사용하려는 database 이름
 PostgreSQL	=>  postgresql://username:password@hostname/database
 SQLite(Linux, Mac) =>  sqlite:////absolutepath /to/ database file}
      최상위 디렉터러 "/" 루트 디렉터리
      DB 파일의 위치 : /test/db/db.sqlite
      	sqlite:////test/db/db.sqlite
 SQLite(Windows)	=>  sqlite:///C:/absolutepath /to/ database file}
      최상위 디렉터리 : 드라이브 이름 , C:\, D:\
      DB 파일의 위치 : D:\flask\db\db.sqlite
             sqlite:///D:/flask/db/db.sqlite	











































